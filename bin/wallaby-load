#!/usr/bin/env ruby

require 'qmf'
require 'mrg/grid/config-client'
require 'mrg/grid/config-proxies'

class SimpleLog
  def initialize(*ms)
    @accepted_messages = ms.map {|msg| msg.to_s}.uniq
  end

  def method_missing(m, *args)
    puts args.map {|arg| arg.class == String ? arg : arg.inspect}.join(" ") if accepts?(m)
  end

  private
  def accepts?(msg)
    @accepted_messages.include? msg.to_s
  end
end

host = "localhost"
port = 5672
username = nil
password = nil
debug = :warn
activate = false
Mrg::Grid::SerializedConfigs::ConfigLoader.log = SimpleLog.new(:info)
verbosity = nil

op = OptionParser.new do |opts|
  opts.banner = "Usage wallaby-load [options] file"

  opts.on("-h", "--host HOSTNAME", "qpid broker host (default localhost)") do |h|
    host = h
  end

  opts.on("-p", "--port NUM", "qpid broker port (default 5672)") do |num|
    port = num.to_i
  end

  opts.on("-U", "--user NAME", "qpid username") do |name|
    username = name
  end

  opts.on("-P", "--password PASS", "qpid password") do |pass|
    password = pass
  end

  opts.on("-a", "--activate", "attempt to activate config after loading") do
    activate = true
  end
  
  opts.on("-q", "--quiet", "do not provide progress on load feedback") do
    if verbosity && verbosity != :quiet
      puts "Error:  --quiet and --verbose are mutually exclusive options"
      raise OptionParser::InvalidOption.new("Error:  --quiet and --verbose are incompatible options")
    end
    verbosity = :quiet
    Mrg::Grid::SerializedConfigs::ConfigLoader.log = nil
  end

  opts.on("-v", "--verbose", "provide more progress on load feedback") do
    if verbosity && verbosity != :verbose
      puts "Error:  --quiet and --verbose are mutually exclusive options"
      raise OptionParser::InvalidOption.new("Error:  --quiet and --verbose are incompatible options")
    end
    verbosity = :verbose
    Mrg::Grid::SerializedConfigs::ConfigLoader.log = SimpleLog.new(:info, :debug)
  end
end

begin
  op.parse!
rescue OptionParser::InvalidOption
  puts op
  exit
end

input = (ARGV.size > 0 ? open(ARGV[0]) : $stdin)

console = Qmf::Console.new

settings = Qmf::ConnectionSettings.new
settings.username = username if username
settings.password = password if password
settings.host = host
settings.port = port

connection = Qmf::Connection.new(settings)

broker = console.add_connection(connection)

broker.wait_for_stable

store = console.object(:class=>"Store")
store.storeinit("resetdb"=>"yes")

store_client = Mrg::Grid::ConfigClient::Store.new(store, console)

s = Mrg::Grid::SerializedConfigs::ConfigLoader.new(store_client, input.read)

s.load

if activate
  explain = store_client.ActivateConfig
  if explain != {}
    puts "Failed to activate configuration; please correct the following errors."
    explain.each do |node, node_explain|
      puts "#{node}:"
      node_explain.each do |reason, ls|
        puts "  #{reason}: #{ls.inspect}"
      end
    end
    exit(1)
  end
end