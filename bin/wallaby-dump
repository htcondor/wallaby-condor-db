#!/usr/bin/env ruby

# wallaby-dump:  wallaby store bulk dump utility
#
# Copyright (c) 2009--2010 Red Hat, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

require 'qmf'
require 'optparse'
require 'timeout'

require 'mrg/grid/config-client'
require 'mrg/grid/config-proxies'

host = ENV['WALLABY_BROKER_HOST'] || "localhost"
port = (ENV['WALLABY_BROKER_PORT'] || 5672).to_i
username = ENV['WALLABY_BROKER_USER']
password = ENV['WALLABY_BROKER_PASSWORD']
outfile = nil
debug = :warn

op = OptionParser.new do |opts|
  opts.banner = "Usage wallaby-dump [options] outfile"

  opts.on("-h", "--help", "shows this message") do
    raise OptionParser::InvalidOption
  end

  opts.on("-H", "--host HOSTNAME", "qpid broker host (default localhost)") do |h|
    host = h
  end

  opts.on("-p", "--port NUM", "qpid broker port (default 5672)") do |num|
    port = num.to_i
  end

  opts.on("-U", "--user NAME", "qpid username") do |name|
    username = name
  end

  opts.on("-P", "--password PASS", "qpid password") do |pass|
    password = pass
  end
end

begin
  op.parse!
rescue OptionParser::InvalidOption
  puts op
  exit
end

if ARGV.size > 1
  puts "wallaby-dump: You must specify only one output file (or \"--\")."
  puts op
  exit
end

outfile = (ARGV[0] || "--")

console = Qmf::Console.new

settings = Qmf::ConnectionSettings.new
settings.username = username if username
settings.password = password if password
settings.host = host
settings.port = port

begin
  Timeout.timeout(15) do
    connection = Qmf::Connection.new(settings)

    broker = console.add_connection(connection)

    broker.wait_for_stable
  end
rescue Timeout::Error
  puts "fatal:  timed out connecting to broker on #{host}:#{port}"
  exit!(1)
end

store = console.object(:class=>"Store")

unless store
  puts "fatal:  cannot find a wallaby agent on the specified broker (#{host}:#{port}); is one running?"
  puts "use -h for help"
  exit!(1)
end

s = Mrg::Grid::SerializedConfigs::ConfigSerializer.new(store, true, console)

serialized = s.serialize

if outfile != "--" then
  File.open(outfile, "w") do |of|
    of.write(serialized.to_yaml)
  end
else
  puts serialized.to_yaml
end