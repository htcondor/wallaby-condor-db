--- !ruby/object:Mrg::Grid::PatchConfigs::Patch 
db_version: "1.4"
expected: !ruby/object:Mrg::Grid::SerializedConfigs::Store 
  features: 
    CommonUIDDomain: 
      params: 
        UID_DOMAIN: ""
    HAScheduler: 
      params: 
        HA_LOCK_HOLD_TIME: "300"
        HA_LOCK_URL: ""
        VALID_SPOOL_FILES: $(VALID_SPOOL_FILES), SCHEDD.lock
        MASTER_HA_LIST: $(MASTER_HA_LIST), SCHEDD
        HA_POLL_PERIOD: "60"
        SCHEDD_NAME: ""
    JobServer: 
      params: 
        JOB_SERVER_LOG: $(LOG)/JobServerLog
        DAEMON_LIST: ">= JOB_SERVER"
        JOB_SERVER: $(SBIN)/condor_job_server
        DC_DAEMON_LIST: ">= JOB_SERVER"
        JOB_SERVER_ADDRESS_FILE: $(LOG)/.job_server_address
        JOB_SERVER_DEBUG: ""
        MAX_JOB_SERVER_LOG: "1000000"
    ExecuteNode: 
      included_features: []

      params: 
        STARTD_JOB_EXPRS: ImageSize, ExecutableSize, JobUniverse, NiceUser
        STARTER_LOG: $(LOG)/StarterLog
        RUNBENCHMARKS: (LastBenchmark == 0 ) || ($(BenchmarkTimer) >= (4 * $(HOUR)))
        KILL: $(ActivityTimer) > $(MaxVacateTime)
        MAXJOBRETIREMENTTIME: "0"
        STARTER_LIST: STARTER, STARTER_LOCAL
        DAEMON_LIST: ">= STARTD"
        CONSOLE_DEVICES: mouse, console
        PERIODIC_CHECKPOINT: $(LastCkpt) > (3 * $(HOUR) + $RANDOM_INTEGER(-30,30,1) * $(MINUTE) )
        STARTER_DEBUG: D_NODATE
        STARTER: $(SBIN)/condor_starter
        STARTD: $(SBIN)/condor_startd
        MAX_STARTD_LOG: "1000000"
        SUSPEND: ( $(KeyboardBusy) || ( (CpuBusyTime > 2 * $(MINUTE)) && $(ActivationTimer) > 90 ) )
        START: ( (KeyboardIdle > $(StartIdleTime)) && ( $(CPUIdle) || (State != "Unclaimed" && State != "Owner")) )
        STARTD_DEBUG: ""
        PREEMPT: ( ((Activity == "Suspended") && ($(ActivityTimer) > $(MaxSuspendTime))) || (SUSPEND && (WANT_SUSPEND == False)) )
        STARTD_LOG: $(LOG)/StartLog
        MAX_STARTER_LOG: "1000000"
        STARTER_LOCAL: $(SBIN)/condor_starter
        STARTD_ADDRESS_FILE: $(LOG)/.startd_address
        WANT_SUSPEND: ( $(SmallJob) || $(KeyboardNotBusy) || $(IsVanilla) ) && ( $(SUSPEND) )
        CONTINUE: ( $(CPUIdle) && ($(ActivityTimer) > 10) && (KeyboardIdle > $(ContinueIdleTime)) )
        BENCHMARKTIMER: (CurrentTime - LastBenchmark)
        STARTD_ATTRS: "\"$(COLLECTOR_HOST)\", SmallJob, KeyboardNotBusy, IsVanilla, ActivationTimer, MINUTE, StartIdleTime, CPUIdle, KeyboardBusy, ContinueIdleTime, MaxSuspendTime, MaxVacateTime, HOUR, LastCkpt"
        WANT_VACATE: ( $(ActivationTimer) > 10 * $(MINUTE) || $(IsVanilla) )
    Master: 
      params: 
        SEC_DEFAULT_NEGOTIATION: OPTIONAL
        MASTER: $(SBIN)/condor_master
        DAEMON_LIST: ">= MASTER"
        SEC_DEFAULT_INTEGRITY: REQUIRED
        SEC_DEFAULT_CRYPTO_METHODS: 3DES
        CONDOR_DEVELOPERS: NONE
        MASTER.SEC_DEFAULT_AUTHENTICATION_METHODS: $(SEC_DEFAULT_AUTHENTICATION_METHODS), FS
        ALLOW_ADMINISTRATOR: $(ALLOW_ADMINISTRATOR)
        SEC_DEFAULT_AUTHENTICATION_METHODS: CLAIMTOBE
        MASTER_ADDRESS_FILE: $(LOG)/.master_address
        CONDOR_HOST: ""
        SEC_DEFAULT_AUTHENTICATION: OPTIONAL
        CONDOR_DEVELOPERS_COLLECTOR: NONE
        COLLECTOR_NAME: ""
        SEC_DEFAULT_ENCRYPTION: REQUIRED
    SchedulerDedicatedPreemption: 
      params: 
        SCHEDD_PREEMPTION_RANK: "0"
        SCHEDD_PREEMPTION_REQUIREMENTS: ""
    SharedFileSystem: 
      params: 
        FILESYSTEM_DOMAIN: ""
    VMUniverse: 
      params: 
        VM_MEMORY: $(DETECTED_MEMORY)
        LIBVIRT_XML_SCRIPT: ""
        VM_GAHP_SERVER: $(SBIN)/condor_vm-gahp
        VM_TYPE: ""
        VM_GAHP_LOG: $(LOG)/VMGahpLog
        VM_NETWORKING: ""
        MAX_VM_GAHP_LOG: "1000000"
        VM_SCRIPT: $(SBIN)/condor_vm_xen.sh
    ConsoleSchedulerForJobServer: 
      conflicts: []

      included_features: []

      params: 
        QUEUE_ALL_USERS_TRUSTED: "True"
        QMF_PUBLISH_SUBMISSIONS: "FALSE"
      depends: 
      - BaseScheduler
    DedicatedResource: 
      params: 
        KILL: "False"
        RANK: SCHEDULER =?= $(DEDICATEDSCHEDULER) * $(RANK_FACTOR)
        RANK_FACTOR: "1000000"
        DEDICATEDSCHEDULER: ""
        PREEMPT: SCHEDULER =!= $(DEDICATEDSCHEDULER) && ($(PREEMPT))
        START: (SCHEDULER =?= $(DEDICATEDSCHEDULER)) || ($(START))
        SUSPEND: SCHEDULER =!= $(DEDICATEDSCHEDULER)) || ($(SUSPEND))
        WANT_SUSPEND: "False"
        CONTINUE: "True"
        STARTD_ATTRS: $(STARTD_ATTRS), DEDICATEDSCHEDULER
        WANT_VACATE: "False"
    HACentralManager: 
      params: 
        HAD: $(SBIN)/condor_had
        MASTER_NEGOTIATOR_CONTROLLER: HAD
        MAX_TRANSFERER_LIFETIME: "300"
        MASTER_HAD_BACKOFF_CONSTANT: "360"
        MAX_HAD_LOG: "640000"
        HAD_USE_REPLICATION: "true"
        HAD_CONNECTION_TIMEOUT: "2"
        MAX_REPLICATION_LOG: "640000"
        REPLICATION_PORT: "41450"
        HAD_USE_PRIMARY: "true"
        ALLOW_NEGOTIATOR: $(ALLOW_NEGOTIATOR), $(COLLECTOR_HOST)
        DAEMON_LIST: ">= HAD REPLICATION"
        REPLICATION: $(SBIN)/condor_replication
        ALLOW_NEGOTIATOR_SCHEDD: $(FLOCK_NEGOTIATOR_HOSTS), $(COLLECTOR_HOST)
        REPLICATION_ARGS: -p $(REPLICATION_PORT)
        ALLOW_ADMINISTRATOR: $(ALLOW_ADMINISTRATOR), $(COLLECTOR_HOST)
        REPLICATION_LIST: ""
        COLLECTOR_HOST: $(CONDOR_HOST)
        CONDOR_HOST: ""
        REPLICATION_INTERVAL: "300"
        HAD_LOG: $(LOG)/HADLog
        REPLICATION_LOG: $(LOG)/ReplicationLog
        STATE_FILE: $(SPOOL)/Accountantnew.log
        HAD_ARGS: -p $(HAD_PORT)
        TRANSFERER_LOG: $(LOG)/TransfererLog
        HAD_LIST: ""
        HAD_UPDATE_INTERVAL: "300"
        HAD_PORT: "51450"
    JobQueueLocation: 
      params: 
        HISTORY: $(SPOOL)/history
        SPOOL: ""
    TriggerService: 
      params: 
        MAX_TRIGGERD_LOG: "1000000"
        DAEMON_LIST: ">= TRIGGERD"
        TRIGGERD: $(SBIN)/condor_triggerd
        TRIGGERD.QMF_STOREFILE: $(DATA)/.triggerd_storefile
        DATA: $(SPOOL)
        TRIGGERD_ADDRESS_FILE: $(LOG)/.triggerd_address
        TRIGGERD_DEFAULT_EVAL_PERIOD: "10"
        TRIGGERD_LOG: $(LOG)/TriggerLog
    BaseScheduler: 
      included_features: []

      params: 
        SHADOW: $(SBIN)/condor_shadow
        SHADOW_LOG: $(LOG)/ShadowLog
        SHADOW_SIZE_ESTIMATE: "1800"
        SHADOW_DEBUG: ""
        SHADOW_LIST: SHADOW
        SCHEDD_DEBUG: D_PID
        SCHEDD: $(SBIN)/condor_schedd
        MAX_SHADOW_LOG: "1000000"
        QUEUE_SUPER_USERS: root, condor
        DAEMON_LIST: ">= SCHEDD"
        SHADOW_LOCK: $(LOCK)/ShadowLock
        ALLOW_NEGOTIATOR_SCHEDD: $(ALLOW_NEGOTIATOR_SCHEDD), $(CONDOR_HOST), $(FLOCK_NEGOTIATOR_HOSTS)
        START_LOCAL_UNIVERSE: "True"
        MAX_SCHEDD_LOG: "1000000"
        SCHEDD_DAEMON_AD_FILE: $(LOG)/.schedd_classad
        SCHEDD_ADDRESS_FILE: $(LOG)/.schedd_address
        SCHEDD_LOG: $(LOG)/SchedLog
        START_SCHEDULER_UNIVERSE: "True"
    EC2Enhanced: 
      params: 
        NEED_SET_EC2E_ROUTES: "TRUE"
        EC2E_HOOK_JOB_CLEANUP: $(LIBEXEC)/hooks/hook_cleanup.py
        JOB_ROUTER_HOOK_KEYWORD: EC2E
        EC2E_HOOK_UPDATE_JOB_INFO: $(LIBEXEC)/hooks/hook_retrieve_status.py
        EC2E_HOOK_JOB_EXIT: $(LIBEXEC)/hooks/hook_job_finalize.py
        EC2E_ATTRS_TO_COPY: EC2RunAttempts, EC2JobSuccessful
        JOB_ROUTER_DEFAULTS: $(JOB_ROUTER_DEFAULTS) [ MaxIdleJobs = 10; MaxJobs = 200; set_PeriodicRemove = (JobStatus == 5 && HoldReason =!= "Spooling input data files") || (JobStatus == 1 && (CurrentTime - QDate) > 3600*6); set_requirements = true; set_WantAWS = false; ]
        EC2E_HOOK_TRANSLATE_JOB: $(LIBEXEC)/hooks/hook_translate.py
        JOB_ROUTER_ENTRIES: ""
    NodeAccess: 
      params: 
        ALLOW_WRITE: ""
        ALLOW_READ: ""
    QMF: 
      params: 
        QMF_BROKER_HOST: ""
        QMF_DELETE_ON_SHUTDOWN: "TRUE"
        QMF_BROKER_PORT: "5672"
  groups: {}

  nodes: {}

  params: 
    SEC_DEFAULT_NEGOTIATION: 
      requires_restart: false
    STARTER_LIST: 
      default: STARTER, STARTER_LOCAL
      depends: 
      - STARTER
      - STARTER_LOCAL
    SEC_DEFAULT_INTEGRITY: 
      requires_restart: false
    SEC_DEFAULT_CRYPTO_METHODS: 
      requires_restart: false
    SCHEDD.SEC_DEFAULT_AUTHENTICATION_METHODS: 
      requires_restart: false
    SEC_DEFAULT_AUTHENTICATION_METHODS: 
      requires_restart: false
    MASTER.SEC_DEFAULT_AUTHENTICATION_METHODS: 
      requires_restart: false
    SEC_DEFAULT_AUTHENTICATION: 
      requires_restart: false
    JOB_ROUTER.SEC_DEFAULT_AUTHENTICATION_METHODS: 
      requires_restart: false
    DATA: 
      default: $(SPOOL)
      depends: 
      - SPOOL
    SEC_DEFAULT_ENCRYPTION: 
      requires_restart: false
  subsystems: 
    schedd: 
      params: 
      - ALLOW_NEGOTIATOR_SCHEDD
      - ALLOW_WRITE
      - HISTORY
      - MAX_SCHEDD_LOG
      - MAX_SHADOW_LOG
      - QMF_BROKER_HOST
      - QMF_BROKER_PORT
      - QMF_DELETE_ON_SHUTDOWN
      - QMF_PUBLISH_SUBMISSIONS
      - QUEUE_ALL_USERS_TRUSTED
      - QUEUE_SUPER_USERS
      - SCHEDD
      - SCHEDD.PLUGINS
      - SCHEDD_ADDRESS_FILE
      - SCHEDD_DAEMON_AD_FILE
      - SCHEDD_DEBUG
      - SCHEDD_LOG
      - SHADOW
      - SHADOW_DEBUG
      - SHADOW_LIST
      - SHADOW_LOCK
      - SHADOW_LOG
      - SHADOW_SIZE_ESTIMATE
      - START_LOCAL_UNIVERSE
      - START_SCHEDULER_UNIVERSE
    startd: 
      params: 
      - ALLOW_READ
      - ALLOW_WRITE
      - BENCHMARKTIMER
      - CONSOLE_DEVICES
      - CONTINUE
      - KILL
      - MAXJOBRETIREMENTTIME
      - MAX_STARTD_LOG
      - MAX_STARTER_LOG
      - PERIODIC_CHECKPOINT
      - PREEMPT
      - QMF_BROKER_HOST
      - QMF_BROKER_PORT
      - QMF_DELETE_ON_SHUTDOWN
      - RUNBENCHMARKS
      - START
      - STARTD
      - STARTD_ADDRESS_FILE
      - STARTD_ATTRS
      - STARTD_CRON_AUTOPUBLISH
      - STARTD_CRON_NAME
      - STARTD_DEBUG
      - STARTD_JOB_EXPRS
      - STARTD_LOG
      - STARTER
      - STARTER_DEBUG
      - STARTER_LIST
      - STARTER_LOCAL
      - STARTER_LOG
      - SUSPEND
      - TRIGGER_DATA_GETDATA_EXECUTABLE
      - TRIGGER_DATA_GETDATA_PERIOD
      - TRIGGER_DATA_GETDATA_PREFIX
      - TRIGGER_DATA_GETDATA_RECONFIG
      - TRIGGER_DATA_JOBLIST
      - WANT_SUSPEND
      - WANT_VACATE
updates: !ruby/object:Mrg::Grid::SerializedConfigs::Store 
  features: 
    BaseJobExecuter: 
      modifyParams: 
      - REPLACE
      - STARTER_LOG: $(LOG)/StarterLog
        STARTER_DEBUG: D_NODATE
        MAX_STARTER_LOG: "1000000"
      - {}

      modifyDepends: 
      - REPLACE
      - []

      - {}

      modifyConflicts: 
      - REPLACE
      - []

      - {}

      modifyIncludedFeatures: 
      - REPLACE
      - []

      - {}

    CommonUIDDomain: 
      modifyParams: 
      - REPLACE
      - UID_DOMAIN: 0
      - {}

    HAScheduler: 
      modifyParams: 
      - REPLACE
      - HA_LOCK_HOLD_TIME: "300"
        HA_LOCK_URL: 0
        VALID_SPOOL_FILES: $(VALID_SPOOL_FILES), SCHEDD.lock
        HA_POLL_PERIOD: "60"
        MASTER_HA_LIST: $(MASTER_HA_LIST), SCHEDD
        SCHEDD_NAME: 0
      - {}

    JobServer: 
      modifyParams: 
      - REPLACE
      - JOB_SERVER_LOG: $(LOG)/JobServerLog
        DAEMON_LIST: ">= JOB_SERVER"
        JOB_SERVER: $(SBIN)/condor_job_server
        DC_DAEMON_LIST: ">= JOB_SERVER"
        JOB_SERVER_ADDRESS_FILE: $(LOG)/.job_server_address
        JOB_SERVER_DEBUG: ""
        QMF_PUBLISH_SUBMISSIONS: "FALSE"
        MAX_JOB_SERVER_LOG: "1000000"
      - {}

    ExecuteNode: 
      modifyParams: 
      - REPLACE
      - STARTD_JOB_EXPRS: ImageSize, ExecutableSize, JobUniverse, NiceUser
        RUNBENCHMARKS: (LastBenchmark == 0 ) || ($(BenchmarkTimer) >= (4 * $(HOUR)))
        KILL: $(ActivityTimer) > $(MaxVacateTime)
        MAXJOBRETIREMENTTIME: "0"
        PERIODIC_CHECKPOINT: $(LastCkpt) > (3 * $(HOUR) + $RANDOM_INTEGER(-30,30,1) * $(MINUTE) )
        DAEMON_LIST: ">= STARTD"
        CONSOLE_DEVICES: mouse, console
        STARTER_LIST: STARTER
        STARTD_DEBUG: ""
        MAX_STARTD_LOG: "1000000"
        START: ( (KeyboardIdle > $(StartIdleTime)) && ( $(CPUIdle) || (State != "Unclaimed" && State != "Owner")) )
        STARTER: $(SBIN)/condor_starter
        PREEMPT: ( ((Activity == "Suspended") && ($(ActivityTimer) > $(MaxSuspendTime))) || (SUSPEND && (WANT_SUSPEND == False)) )
        SUSPEND: ( $(KeyboardBusy) || ( (CpuBusyTime > 2 * $(MINUTE)) && $(ActivationTimer) > 90 ) )
        STARTD: $(SBIN)/condor_startd
        STARTD_LOG: $(LOG)/StartLog
        STARTD_ADDRESS_FILE: $(LOG)/.startd_address
        WANT_SUSPEND: ( $(SmallJob) || $(KeyboardNotBusy) || $(IsVanilla) ) && ( $(SUSPEND) )
        CONTINUE: ( $(CPUIdle) && ($(ActivityTimer) > 10) && (KeyboardIdle > $(ContinueIdleTime)) )
        BENCHMARKTIMER: (CurrentTime - LastBenchmark)
        WANT_VACATE: ( $(ActivationTimer) > 10 * $(MINUTE) || $(IsVanilla) )
        STARTD_ATTRS: "\"$(COLLECTOR_HOST)\", SmallJob, KeyboardNotBusy, IsVanilla, ActivationTimer, MINUTE, StartIdleTime, CPUIdle, KeyboardBusy, ContinueIdleTime, MaxSuspendTime, MaxVacateTime, HOUR, LastCkpt"
      - {}

      modifyIncludedFeatures: 
      - REPLACE
      - - BaseJobExecuter
      - {}

    Master: 
      modifyParams: 
      - REPLACE
      - SEC_DEFAULT_NEGOTIATION: OPTIONAL
        MASTER: $(SBIN)/condor_master
        DAEMON_LIST: ">= MASTER"
        SEC_DEFAULT_INTEGRITY: REQUIRED
        SEC_DEFAULT_CRYPTO_METHODS: 3DES
        MASTER.SEC_DEFAULT_AUTHENTICATION_METHODS: $(SEC_DEFAULT_AUTHENTICATION_METHODS), FS
        ALLOW_ADMINISTRATOR: $(ALLOW_ADMINISTRATOR)
        CONDOR_DEVELOPERS: NONE
        SEC_DEFAULT_AUTHENTICATION_METHODS: $(SEC_DEFAULT_AUTHENTICATION_METHODS), CLAIMTOBE
        MASTER_ADDRESS_FILE: $(LOG)/.master_address
        SEC_DEFAULT_AUTHENTICATION: OPTIONAL
        CONDOR_HOST: 0
        CONDOR_DEVELOPERS_COLLECTOR: NONE
        COLLECTOR_NAME: ""
        SEC_DEFAULT_ENCRYPTION: REQUIRED
      - {}

    SchedulerDedicatedPreemption: 
      modifyParams: 
      - REPLACE
      - SCHEDD_PREEMPTION_RANK: "0"
        SCHEDD_PREEMPTION_REQUIREMENTS: 0
      - {}

    SharedFileSystem: 
      modifyParams: 
      - REPLACE
      - FILESYSTEM_DOMAIN: 0
      - {}

    VMUniverse: 
      modifyParams: 
      - REPLACE
      - VM_MEMORY: $(DETECTED_MEMORY)
        VM_GAHP_SERVER: $(SBIN)/condor_vm-gahp
        VM_TYPE: 0
        LIBVIRT_XML_SCRIPT: 0
        VM_GAHP_LOG: $(LOG)/VMGahpLog
        VM_NETWORKING: 0
        MAX_VM_GAHP_LOG: "1000000"
        VM_SCRIPT: $(SBIN)/condor_vm_xen.sh
      - {}

    DedicatedResource: 
      modifyParams: 
      - REPLACE
      - RANK: SCHEDULER =?= $(DEDICATEDSCHEDULER) * $(RANK_FACTOR)
        KILL: "False"
        RANK_FACTOR: "1000000"
        DEDICATEDSCHEDULER: 0
        PREEMPT: SCHEDULER =!= $(DEDICATEDSCHEDULER) && ($(PREEMPT))
        START: (SCHEDULER =?= $(DEDICATEDSCHEDULER)) || ($(START))
        SUSPEND: SCHEDULER =!= $(DEDICATEDSCHEDULER)) || ($(SUSPEND))
        WANT_SUSPEND: "False"
        CONTINUE: "True"
        WANT_VACATE: "False"
        STARTD_ATTRS: $(STARTD_ATTRS), DEDICATEDSCHEDULER
      - {}

    HACentralManager: 
      modifyParams: 
      - REPLACE
      - HAD: $(SBIN)/condor_had
        MASTER_NEGOTIATOR_CONTROLLER: HAD
        MAX_TRANSFERER_LIFETIME: "300"
        MASTER_HAD_BACKOFF_CONSTANT: "360"
        MAX_HAD_LOG: "640000"
        MAX_REPLICATION_LOG: "640000"
        HAD_CONNECTION_TIMEOUT: "2"
        HAD_USE_PRIMARY: "true"
        HAD_USE_REPLICATION: "true"
        REPLICATION_PORT: "41450"
        ALLOW_NEGOTIATOR: $(ALLOW_NEGOTIATOR), $(COLLECTOR_HOST)
        DAEMON_LIST: ">= HAD REPLICATION"
        ALLOW_NEGOTIATOR_SCHEDD: $(FLOCK_NEGOTIATOR_HOSTS), $(COLLECTOR_HOST)
        REPLICATION: $(SBIN)/condor_replication
        ALLOW_ADMINISTRATOR: $(ALLOW_ADMINISTRATOR), $(COLLECTOR_HOST)
        REPLICATION_ARGS: -p $(REPLICATION_PORT)
        REPLICATION_INTERVAL: "300"
        CONDOR_HOST: ""
        REPLICATION_LIST: 0
        COLLECTOR_HOST: $(CONDOR_HOST)
        HAD_LOG: $(LOG)/HADLog
        STATE_FILE: $(SPOOL)/Accountantnew.log
        REPLICATION_LOG: $(LOG)/ReplicationLog
        HAD_ARGS: -p $(HAD_PORT)
        HAD_LIST: 0
        TRANSFERER_LOG: $(LOG)/TransfererLog
        HAD_UPDATE_INTERVAL: "300"
        HAD_PORT: "51450"
      - {}

    JobQueueLocation: 
      modifyParams: 
      - REPLACE
      - HISTORY: $(SPOOL)/history
        SPOOL: 0
      - {}

    TriggerService: 
      modifyParams: 
      - REPLACE
      - MAX_TRIGGERD_LOG: "1000000"
        TRIGGERD: $(SBIN)/condor_triggerd
        DAEMON_LIST: ">= TRIGGERD"
        TRIGGERD.QMF_STOREFILE: $(DATA)/.triggerd_storefile
        DATA: 0
        TRIGGERD_ADDRESS_FILE: $(LOG)/.triggerd_address
        TRIGGERD_LOG: $(LOG)/TriggerLog
        TRIGGERD_DEFAULT_EVAL_PERIOD: "10"
      - {}

    BaseScheduler: 
      modifyParams: 
      - REPLACE
      - SHADOW_SIZE_ESTIMATE: "1800"
        SHADOW_LOG: $(LOG)/ShadowLog
        SHADOW_LIST: SHADOW
        SHADOW_DEBUG: ""
        SHADOW: $(SBIN)/condor_shadow
        SCHEDD_DEBUG: D_PID
        MAX_SHADOW_LOG: "1000000"
        SCHEDD: $(SBIN)/condor_schedd
        QUEUE_SUPER_USERS: root, condor
        DAEMON_LIST: ">= SCHEDD"
        ALLOW_NEGOTIATOR_SCHEDD: $(ALLOW_NEGOTIATOR_SCHEDD), $(CONDOR_HOST), $(FLOCK_NEGOTIATOR_HOSTS)
        SHADOW_LOCK: $(LOCK)/ShadowLock
        SCHEDD_DAEMON_AD_FILE: $(LOG)/.schedd_classad
        MAX_SCHEDD_LOG: "1000000"
        START_LOCAL_UNIVERSE: "True"
        SCHEDD_ADDRESS_FILE: $(LOG)/.schedd_address
        STARTER_LOCAL: $(SBIN)/condor_starter
        SCHEDD_LOG: $(LOG)/SchedLog
        START_SCHEDULER_UNIVERSE: "True"
      - {}

      modifyIncludedFeatures: 
      - REPLACE
      - - BaseJobExecuter
      - {}

    EC2Enhanced: 
      modifyParams: 
      - REPLACE
      - EC2E_HOOK_JOB_CLEANUP: $(LIBEXEC)/hooks/hook_cleanup.py
        NEED_SET_EC2E_ROUTES: "TRUE"
        JOB_ROUTER_HOOK_KEYWORD: EC2E
        EC2E_HOOK_UPDATE_JOB_INFO: $(LIBEXEC)/hooks/hook_retrieve_status.py
        EC2E_ATTRS_TO_COPY: EC2RunAttempts, EC2JobSuccessful
        EC2E_HOOK_JOB_EXIT: $(LIBEXEC)/hooks/hook_job_finalize.py
        JOB_ROUTER_DEFAULTS: $(JOB_ROUTER_DEFAULTS) [ MaxIdleJobs = 10; MaxJobs = 200; set_PeriodicRemove = (JobStatus == 5 && HoldReason =!= "Spooling input data files") || (JobStatus == 1 && (CurrentTime - QDate) > 3600*6); set_requirements = true; set_WantAWS = false; ]
        EC2E_HOOK_TRANSLATE_JOB: $(LIBEXEC)/hooks/hook_translate.py
        JOB_ROUTER_ENTRIES: 0
      - {}

    NodeAccess: 
      modifyParams: 
      - REPLACE
      - ALLOW_WRITE: 0
        ALLOW_READ: 0
      - {}

    QMF: 
      modifyParams: 
      - REPLACE
      - QMF_BROKER_HOST: 0
        QMF_DELETE_ON_SHUTDOWN: "TRUE"
        QMF_BROKER_PORT: "5672"
      - {}

  groups: {}

  nodes: {}

  params: 
    SEC_DEFAULT_NEGOTIATION: 
      setRequiresRestart: true
    STARTER_LIST: 
      setDefault: STARTER
      modifyDepends: 
      - REPLACE
      - - STARTER
      - {}

    SEC_DEFAULT_INTEGRITY: 
      setRequiresRestart: true
    SEC_DEFAULT_CRYPTO_METHODS: 
      setRequiresRestart: true
    SCHEDD.SEC_DEFAULT_AUTHENTICATION_METHODS: 
      setRequiresRestart: true
    SEC_DEFAULT_AUTHENTICATION_METHODS: 
      setRequiresRestart: true
    MASTER.SEC_DEFAULT_AUTHENTICATION_METHODS: 
      setRequiresRestart: true
    SEC_DEFAULT_AUTHENTICATION: 
      setRequiresRestart: true
    JOB_ROUTER.SEC_DEFAULT_AUTHENTICATION_METHODS: 
      setRequiresRestart: true
    DATA: 
      setDefault: ""
      modifyDepends: 
      - REPLACE
      - []

      - {}

    SEC_DEFAULT_ENCRYPTION: 
      setRequiresRestart: true
  subsystems: 
    schedd: 
      modifyParams: 
      - REPLACE
      - - ALLOW_NEGOTIATOR_SCHEDD
        - ALLOW_WRITE
        - HISTORY
        - MAX_SCHEDD_LOG
        - MAX_SHADOW_LOG
        - MAX_STARTER_LOG
        - QMF_BROKER_HOST
        - QMF_BROKER_PORT
        - QMF_DELETE_ON_SHUTDOWN
        - QMF_PUBLISH_SUBMISSIONS
        - QUEUE_ALL_USERS_TRUSTED
        - QUEUE_SUPER_USERS
        - SCHEDD
        - SCHEDD.PLUGINS
        - SCHEDD_ADDRESS_FILE
        - SCHEDD_DAEMON_AD_FILE
        - SCHEDD_DEBUG
        - SCHEDD_LOG
        - SHADOW
        - SHADOW_DEBUG
        - SHADOW_LIST
        - SHADOW_LOCK
        - SHADOW_LOG
        - SHADOW_SIZE_ESTIMATE
        - STARTER_DEBUG
        - STARTER_LOCAL
        - STARTER_LOG
        - START_LOCAL_UNIVERSE
        - START_SCHEDULER_UNIVERSE
      - {}

    startd: 
      modifyParams: 
      - REPLACE
      - - ALLOW_READ
        - ALLOW_WRITE
        - BENCHMARKTIMER
        - CONSOLE_DEVICES
        - CONTINUE
        - KILL
        - MAXJOBRETIREMENTTIME
        - MAX_STARTD_LOG
        - MAX_STARTER_LOG
        - PERIODIC_CHECKPOINT
        - PREEMPT
        - QMF_BROKER_HOST
        - QMF_BROKER_PORT
        - QMF_DELETE_ON_SHUTDOWN
        - RUNBENCHMARKS
        - START
        - STARTD
        - STARTD_ADDRESS_FILE
        - STARTD_ATTRS
        - STARTD_CRON_AUTOPUBLISH
        - STARTD_CRON_NAME
        - STARTD_DEBUG
        - STARTD_JOB_EXPRS
        - STARTD_LOG
        - STARTER
        - STARTER_DEBUG
        - STARTER_LIST
        - STARTER_LOG
        - SUSPEND
        - TRIGGER_DATA_GETDATA_EXECUTABLE
        - TRIGGER_DATA_GETDATA_PERIOD
        - TRIGGER_DATA_GETDATA_PREFIX
        - TRIGGER_DATA_GETDATA_RECONFIG
        - TRIGGER_DATA_JOBLIST
        - WANT_SUSPEND
        - WANT_VACATE
      - {}

