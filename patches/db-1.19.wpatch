--- !ruby/object:Mrg::Grid::PatchConfigs::Patch 
db_version: "1.19"
expected: !ruby/object:Mrg::Grid::SerializedConfigs::Store 
  features: 
    BaseDBVersion: 
      params: 
        BaseDBVersion: "1.18"
    ExecuteNode: 
      params: 
        STARTD_JOB_EXPRS: ImageSize, ExecutableSize, JobUniverse, NiceUser
        KILL: $(ActivityTimer) > $(MaxVacateTime)
        RUNBENCHMARKS: (LastBenchmark == 0 ) || ($(BenchmarkTimer) >= (4 * $(HOUR)))
        MAXJOBRETIREMENTTIME: "0"
        CONSOLE_DEVICES: mouse, console
        DAEMON_LIST: ">= STARTD"
        PERIODIC_CHECKPOINT: $(LastCkpt) > (3 * $(HOUR) + $RANDOM_INTEGER(-30,30,1) * $(MINUTE) )
        STARTER_LIST: STARTER
        STARTD_DEBUG: ""
        START: ( (KeyboardIdle > $(StartIdleTime)) && ( $(CPUIdle) || (State != "Unclaimed" && State != "Owner")) )
        STARTER: $(SBIN)/condor_starter
        MAX_STARTD_LOG: "1000000"
        STARTD: $(SBIN)/condor_startd
        SUSPEND: ( $(KeyboardBusy) || ( (CpuBusyTime > 2 * $(MINUTE)) && $(ActivationTimer) > 90 ) )
        PREEMPT: ( ((Activity == "Suspended") && ($(ActivityTimer) > $(MaxSuspendTime))) || (SUSPEND && (WANT_SUSPEND == False)) )
        STARTD_LOG: $(LOG)/StartLog
        STARTD_ADDRESS_FILE: $(LOG)/.startd_address
        WANT_SUSPEND: ( $(SmallJob) || $(KeyboardNotBusy) || $(IsVanilla) ) && ( $(SUSPEND) )
        CONTINUE: ( $(CPUIdle) && ($(ActivityTimer) > 10) && (KeyboardIdle > $(ContinueIdleTime)) )
        BENCHMARKTIMER: (CurrentTime - LastBenchmark)
        STARTD_ATTRS: "\"$(COLLECTOR_HOST)\", SmallJob, KeyboardNotBusy, IsVanilla, ActivationTimer, MINUTE, StartIdleTime, CPUIdle, KeyboardBusy, ContinueIdleTime, MaxSuspendTime, MaxVacateTime, HOUR, LastCkpt"
        WANT_VACATE: ( $(ActivationTimer) > 10 * $(MINUTE) || $(IsVanilla) )
    DedicatedResource: 
      params: 
        RANK: SCHEDULER =?= $(DEDICATEDSCHEDULER) * $(RANK_FACTOR)
        KILL: "False"
        RANK_FACTOR: "1000000"
        DEDICATEDSCHEDULER: 0
        START: (SCHEDULER =?= $(DEDICATEDSCHEDULER)) || ($(START))
        PREEMPT: SCHEDULER =!= $(DEDICATEDSCHEDULER) && ($(PREEMPT))
        SUSPEND: SCHEDULER =!= $(DEDICATEDSCHEDULER)) || ($(SUSPEND))
        WANT_SUSPEND: "False"
        CONTINUE: "True"
        WANT_VACATE: "False"
        STARTD_ATTRS: $(STARTD_ATTRS), DEDICATEDSCHEDULER
  groups: {}

  nodes: {}

  params: {}

  subsystems: 
    master: 
      params: 
      - ALLOW_ADMINISTRATOR
      - COLLECTOR_NAME
      - CONDOR_DEVELOPERS
      - CONDOR_DEVELOPERS_COLLECTOR
      - CONDOR_HOST
      - DAEMON_LIST
      - DC_DAEMON_LIST
      - MASTER
      - MASTER.PLUGINS
      - MASTER.SEC_DEFAULT_AUTHENTICATION_METHODS
      - MASTER_ADDRESS_FILE
      - QMF_BROKER_AUTH_MECH
      - QMF_BROKER_HOST
      - QMF_BROKER_PASSWORD_FILE
      - QMF_BROKER_PORT
      - QMF_BROKER_USERNAME
      - QMF_DELETE_ON_SHUTDOWN
      - SEC_DEFAULT_AUTHENTICATION
      - SEC_DEFAULT_AUTHENTICATION_METHODS
      - SEC_DEFAULT_CRYPTO_METHODS
      - SEC_DEFAULT_ENCRYPTION
      - SEC_DEFAULT_INTEGRITY
      - SEC_DEFAULT_NEGOTIATION
      - WALLABY_FORCE_CONFIG_PULL
      - WALLABY_FORCE_RESTART
updates: !ruby/object:Mrg::Grid::SerializedConfigs::Store 
  features: 
    BaseDBVersion: 
      modifyParams: 
      - REPLACE
      - BaseDBVersion: v1.19
      - {}

    ExecuteNode: 
      modifyParams: 
      - REPLACE
      - STARTD_JOB_EXPRS: ImageSize, ExecutableSize, JobUniverse, NiceUser
        RUNBENCHMARKS: (LastBenchmark == 0 ) || ($(BenchmarkTimer) >= (4 * $(HOUR)))
        KILL: $(ActivityTimer) > $(MaxVacateTime)
        MAXJOBRETIREMENTTIME: "0"
        STARTER_LIST: STARTER
        PERIODIC_CHECKPOINT: $(LastCkpt) > (3 * $(HOUR) + $RANDOM_INTEGER(-30,30,1) * $(MINUTE) )
        DAEMON_LIST: ">= STARTD"
        CONSOLE_DEVICES: mouse, console
        STARTD_DEBUG: ""
        STARTD: $(SBIN)/condor_startd
        START: ( (KeyboardIdle > $(StartIdleTime)) && ( $(CPUIdle) || (State != "Unclaimed" && State != "Owner")) )
        SUSPEND: ( $(KeyboardBusy) || ( (CpuBusyTime > 2 * $(MINUTE)) && $(ActivationTimer) > 90 ) )
        PREEMPT: ( ((Activity == "Suspended") && ($(ActivityTimer) > $(MaxSuspendTime))) || (SUSPEND && (WANT_SUSPEND == False)) )
        MAX_STARTD_LOG: "1000000"
        STARTER: $(SBIN)/condor_starter
        STARTD_LOG: $(LOG)/StartLog
        WANT_SUSPEND: ( $(SmallJob) || $(KeyboardNotBusy) || $(IsVanilla) ) && ( $(SUSPEND) )
        STARTD_ADDRESS_FILE: $(LOG)/.startd_address
        CONTINUE: ( $(CPUIdle) && ($(ActivityTimer) > 10) && (KeyboardIdle > $(ContinueIdleTime)) )
        BENCHMARKTIMER: (CurrentTime - LastBenchmark)
        STARTD_ATTRS: ">= \"$(COLLECTOR_HOST)\", SmallJob, KeyboardNotBusy, IsVanilla, ActivationTimer, MINUTE, StartIdleTime, CPUIdle, KeyboardBusy, ContinueIdleTime, MaxSuspendTime, MaxVacateTime, HOUR, LastCkpt"
        WANT_VACATE: ( $(ActivationTimer) > 10 * $(MINUTE) || $(IsVanilla) )
      - {}

    DedicatedResource: 
      modifyParams: 
      - REPLACE
      - KILL: "False"
        RANK: SCHEDULER =?= $(DEDICATEDSCHEDULER) * $(RANK_FACTOR)
        RANK_FACTOR: "1000000"
        DEDICATEDSCHEDULER: 0
        START: (SCHEDULER =?= $(DEDICATEDSCHEDULER)) || ($(START))
        PREEMPT: (SCHEDULER =!= $(DEDICATEDSCHEDULER)) && ($(PREEMPT))
        SUSPEND: (SCHEDULER =!= $(DEDICATEDSCHEDULER)) || ($(SUSPEND))
        WANT_SUSPEND: "False"
        CONTINUE: "True"
        STARTD_ATTRS: ">= DEDICATEDSCHEDULER"
        WANT_VACATE: "False"
      - {}

  groups: {}

  nodes: {}

  params: 
    ALL_DEBUG: 
      setDefault: ""
      setKind: String
      modifyDepends: 
      - REPLACE
      - []

      - {}

      setDescription: Debug flags shared by all subsystems
      setVisibilityLevel: 0
      setMustChange: false
      modifyConflicts: 
      - REPLACE
      - []

      - {}

      setRequiresRestart: false
  subsystems: 
    master: 
      modifyParams: 
      - REPLACE
      - - ALLOW_ADMINISTRATOR
        - COLLECTOR_NAME
        - CONDOR_DEVELOPERS
        - CONDOR_DEVELOPERS_COLLECTOR
        - CONDOR_HOST
        - DAEMON_LIST
        - DC_DAEMON_LIST
        - MASTER
        - MASTER.PLUGINS
        - MASTER.SEC_DEFAULT_AUTHENTICATION_METHODS
        - MASTER.USE_PROCD
        - MASTER_ADDRESS_FILE
        - QMF_BROKER_AUTH_MECH
        - QMF_BROKER_HOST
        - QMF_BROKER_PASSWORD_FILE
        - QMF_BROKER_PORT
        - QMF_BROKER_USERNAME
        - QMF_DELETE_ON_SHUTDOWN
        - SEC_DEFAULT_AUTHENTICATION
        - SEC_DEFAULT_AUTHENTICATION_METHODS
        - SEC_DEFAULT_CRYPTO_METHODS
        - SEC_DEFAULT_ENCRYPTION
        - SEC_DEFAULT_INTEGRITY
        - SEC_DEFAULT_NEGOTIATION
        - WALLABY_FORCE_CONFIG_PULL
        - WALLABY_FORCE_RESTART
      - {}

